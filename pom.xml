<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.ubirch.niomon</groupId>
  <artifactId>redis-cache</artifactId>
  <version>1.0.4-SNAPSHOT</version>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <name>redis-cache [${project.version}]</name>
  <description>niomon caching library</description>
  <url>https://ubirch.com/</url>

  <organization>
    <name>ubirch GmbH</name>
    <url>https://ubirch.com/</url>
  </organization>

  <developers>
    <developer>
      <name>Miko≈Çaj Robakowski</name>
      <email>mikolaj.robakowski@ubirch.com</email>
      <organization>ubirch GmbH</organization>
      <organizationUrl>https://ubirch.com/</organizationUrl>
    </developer>
    <developer>
      <name>Carlos Sanchez</name>
      <email>carlos.sanchezi@ubirch.com</email>
      <organization>ubirch GmbH</organization>
      <organizationUrl>https://ubirch.com/</organizationUrl>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git://github.com/ubirch/niomon-${project.artifactId}.git</connection>
    <developerConnection>scm:git:git@github.com:ubirch/niomon-${project.artifactId}.git</developerConnection>
    <url>https://github.com/ubirch/niomon-${project.artifactId}</url>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <properties>
    <timestamp>${maven.build.timestamp}</timestamp>
    <build.number>devbuild</build.number>
    <maven.build.timestamp.format>yyyyMMdd</maven.build.timestamp.format>

    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>

    <!-- Scala -->
    <scala-maven-plugin.version>3.4.2</scala-maven-plugin.version>
    <scala.major.version>2.12</scala.major.version>
    <scala.minor.version>.8</scala.minor.version>
    <scala.version>${scala.major.version}${scala.minor.version}</scala.version>

    <!-- kafka -->
    <simple.kafka.client.version>2.1.0</simple.kafka.client.version>
    <akka.stream.kafka.version>1.0.1</akka.stream.kafka.version>

    <!-- Logging -->
    <slf4j-api.version>1.7.25</slf4j-api.version>
    <scala-logging.version>3.9.2</scala-logging.version>
    <logback-classic.version>1.2.13</logback-classic.version>

    <!-- Testing -->
    <junit.jupiter.version>5.3.2</junit.jupiter.version>
    <junit.platform.version>1.2.0</junit.platform.version>
    <scalatest.version>3.0.5</scalatest.version>
    <mockito.scala.version>1.4.6</mockito.scala.version>

    <!-- additional libraries -->
    <json4s-jackson.version>3.6.3</json4s-jackson.version>
    <msgpack4s.version>0.6.0</msgpack4s.version>
    <scala-uuid.version>0.3.0</scala-uuid.version>
    <config.version>1.3.3</config.version>
    <logstash-logback-encoder.version>5.3</logstash-logback-encoder.version>
    <skinny-framework.version>3.0.1</skinny-framework.version>
  </properties>

  <dependencies>
    <!-- region scala, logging etc. -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.typesafe.scala-logging</groupId>
      <artifactId>scala-logging_${scala.major.version}</artifactId>
      <version>${scala-logging.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.typesafe</groupId>
      <artifactId>config</artifactId>
      <version>${config.version}</version>
      <scope>provided</scope>
    </dependency>
    <!-- endregion -->

    <!-- region the underlying logging framework -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j-api.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback-classic.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash-logback-encoder.version}</version>
      <scope>provided</scope>
    </dependency>
    <!-- endregion -->

    <!-- region basic unit testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.major.version}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.github.embeddedkafka</groupId>
      <artifactId>embedded-kafka_${scala.major.version}</artifactId>
      <version>2.1.1</version>
      <scope>test</scope>
      <exclusions>
        <!-- The version of paranamer that embedded-kafka (via avro) uses breaks json4s ;_; -->
        <exclusion>
          <artifactId>paranamer</artifactId>
          <groupId>com.thoughtworks.paranamer</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- endregion -->

    <dependency>
      <groupId>org.redisson</groupId>
      <artifactId>redisson</artifactId>
      <version>3.10.5</version>
    </dependency>
  </dependencies>

  <build>
  <plugins>
    <!-- scala compiler -->
    <plugin>
      <groupId>net.alchim31.maven</groupId>
      <artifactId>scala-maven-plugin</artifactId>
      <version>${scala-maven-plugin.version}</version>
      <executions>
        <execution>
          <goals>
            <goal>compile</goal>
            <goal>testCompile</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <recompileMode>incremental</recompileMode>
        <args>
          <arg>-deprecation
          </arg>                      <!--  Emit warning and location for usages of deprecated APIs. -->
          <arg>-encoding</arg>
          <arg>utf-8</arg>        <!--  Specify character encoding used by source files. -->
          <arg>-explaintypes</arg>                     <!--  Explain type errors in more detail. -->
          <arg>-feature
          </arg>                          <!--  Emit warning and location for usages of features that should be imported explicitly. -->
          <arg>-unchecked
          </arg>                        <!--  Enable additional warnings where generated code depends on assumptions. -->
          <arg>-Xcheckinit
          </arg>                       <!--  Wrap field accessors to throw an exception on uninitialized access. -->
          <arg>-Xfatal-warnings
          </arg>                  <!--  Fail the compilation if there are any warnings. -->
          <arg>-Xfuture</arg>                          <!--  Turn on future language features. -->
          <arg>-Xlint:adapted-args
          </arg>               <!--  Warn if an argument list is modified to match the receiver. -->
          <arg>-Xlint:by-name-right-associative
          </arg>  <!--  By-name parameter of right associative operator. -->
          <arg>-Xlint:constant
          </arg>                   <!--  Evaluation of a constant arithmetic expression results in an error. -->
          <arg>-Xlint:delayedinit-select</arg>         <!--  Selecting member of DelayedInit. -->
          <arg>-Xlint:doc-detached
          </arg>               <!--  A Scaladoc comment appears to be detached from its element. -->
          <arg>-Xlint:inaccessible
          </arg>               <!--  Warn about inaccessible types in method signatures. -->
          <arg>-Xlint:infer-any
          </arg>                  <!--  Warn when a type argument is inferred to be `Any`. -->
          <arg>-Xlint:missing-interpolator
          </arg>       <!--  A string literal appears to be missing an interpolator id. -->
          <arg>-Xlint:nullary-override
          </arg>           <!--  Warn when non-nullary `def f()' overrides nullary `def f'. -->
          <arg>-Xlint:nullary-unit</arg>               <!--  Warn when nullary methods return Unit. -->
          <arg>-Xlint:option-implicit</arg>            <!--  Option.apply used implicit view. -->
          <arg>-Xlint:package-object-classes
          </arg>     <!--  Class or object defined in package object. -->
          <arg>-Xlint:poly-implicit-overload
          </arg>     <!--  Parameterized overloaded implicit methods are not visible as view bounds. -->
          <arg>-Xlint:private-shadow
          </arg>             <!--  A private field (or class parameter) shadows a superclass field. -->
          <arg>-Xlint:stars-align
          </arg>                <!--  Pattern sequence wildcard must align with sequence component. -->
          <arg>-Xlint:type-parameter-shadow
          </arg>      <!--  A local type parameter shadows a type already in scope. -->
          <arg>-Xlint:unsound-match</arg>              <!--  Pattern match may not be typesafe. -->
          <arg>-Yno-adapted-args
          </arg>                 <!--  Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver. -->
          <arg>-Ypartial-unification
          </arg>             <!--  Enable partial unification in type constructor inference -->
          <arg>-Ywarn-extra-implicit
          </arg>             <!--  Warn when more than one implicit parameter section is defined. -->
          <arg>-Ywarn-inaccessible
          </arg>               <!--  Warn about inaccessible types in method signatures. -->
          <arg>-Ywarn-infer-any
          </arg>                  <!--  Warn when a type argument is inferred to be `Any`. -->
          <arg>-Ywarn-nullary-override
          </arg>           <!--  Warn when non-nullary `def f()' overrides nullary `def f'. -->
          <arg>-Ywarn-nullary-unit</arg>               <!--  Warn when nullary methods return Unit. -->
          <arg>-Ywarn-numeric-widen</arg>              <!--  Warn when numerics are widened. -->
          <arg>-Ywarn-unused:imports
          </arg>             <!--  Warn if an import selector is not referenced. -->
          <arg>-Ywarn-unused:locals</arg>              <!--  Warn if a local definition is unused. -->
          <arg>-Ywarn-unused:patvars
          </arg>             <!--  Warn if a variable bound in a pattern is unused. -->
          <arg>-Ywarn-unused:privates</arg>            <!--  Warn if a private member is unused. -->
          <arg>-Ywarn-value-discard
          </arg>              <!--  Warn when non-Unit expression results are unused. -->
        </args>
      </configuration>
    </plugin>
    <!-- disable surefire -->
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>2.7</version>
      <configuration>
        <skipTests>true</skipTests>
      </configuration>
    </plugin>
    <!-- enable scalatest -->
    <plugin>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest-maven-plugin</artifactId>
      <version>1.0</version>
      <configuration>
        <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
        <junitxml>.</junitxml>
        <filereports>WDF TestSuite.txt</filereports>
      </configuration>
      <executions>
        <execution>
          <id>test</id>
          <goals>
            <goal>test</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <!-- add licenses.txt -->
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>license-maven-plugin</artifactId>
      <version>1.3</version>
      <executions>
        <execution>
          <id>attach-licenses</id>
          <goals>
            <goal>add-third-party</goal>
          </goals>
          <configuration>
            <thirdPartyFilename>licenses.txt</thirdPartyFilename>
          </configuration>
        </execution>
      </executions>
    </plugin>
    <!-- checkstyle -->
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-checkstyle-plugin</artifactId>
      <version>3.1.2</version>
      <executions>
        <execution>
          <id>verify-style</id>
          <!-- Bind to verify so it runs after package & unit tests, but before install -->
          <phase>test</phase>
          <goals>
            <goal>check</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <configLocation>
          https://raw.githubusercontent.com/ubirch/ubirch-codestyle/master/ubirch-checkstyle.xml
        </configLocation>
        <suppressionsLocation>
          https://raw.githubusercontent.com/ubirch/ubirch-codestyle/master/ubirch-checkstyle-suppression.xml
        </suppressionsLocation>
        <encoding>UTF-8</encoding>
        <consoleOutput>true</consoleOutput>
        <logViolationsToConsole>true</logViolationsToConsole>
        <failOnViolation>true</failOnViolation>
        <includeTestSourceDirectory>true</includeTestSourceDirectory>
      </configuration>
      <dependencies>
        <!-- Override dependencies to use latest version of checkstyle -->
        <dependency>
          <groupId>com.puppycrawl.tools</groupId>
          <artifactId>checkstyle</artifactId>
          <version>8.45.1</version>
        </dependency>
      </dependencies>
    </plugin>
  </plugins>
  </build>

  <repositories>
    <repository>
      <id>snapshots-repo</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

</project>
